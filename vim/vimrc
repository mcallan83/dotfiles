" vim:fdm=marker

" Local Vimrc Before {{{

if filereadable(expand("~/.local.vimrc.before"))
    source ~/.local.vimrc.before
endif

" }}}
" NeoBundle {{{

if has('vim_starting')
    set nocompatible
    set runtimepath+=~/.vim/bundle/neobundle.vim/
endif
let vundle_readme=expand('~/.vim/bundle/neobundle.vim/README.md')
if !filereadable(vundle_readme)
    echo "Installing NeoBundle..."
    echo ""
    silent !mkdir -p ~/.vim/bundle
    silent !git clone https://github.com/Shougo/neobundle.vim ~/.vim/bundle/neobundle.vim/
endif
call neobundle#begin(expand('~/.vim/bundle/'))
NeoBundleFetch 'Shougo/neobundle.vim'

" packages
" ========
NeoBundle 'altercation/vim-colors-solarized'

call neobundle#end()
filetype plugin indent on
NeoBundleCheck

" }}}
" General {{{

    set background=dark     " assume a dark background
    syntax on               " syntax highligting
    set mouse=a             " enable mouse
    set mousehide           " hide mouse cursor while typing
    scriptencoding utf-8

    " clipboard
    if has('clipboard')
        " use + register for copy-paste
        if has('unnamedplus')
            set clipboard=unnamed,unnamedplus
        " use * register for copy-paste
        else
            set clipboard=unnamed
        endif
    endif

    " disable backups
    set nobackup
    set nowb
    set noswapfile

" }}}
" UI {{{

    " solarized
    let g:solarized_termcolors=256
    let g:solarized_termtrans=1
    let g:solarized_contrast="normal"
    let g:solarized_visibility="normal"
    color solarized

    set backspace=indent,eol,start      " backspace for dummies

" }}}
" Formatting {{{

    set autoindent      " indent to same level as previous line
    set smartindent     " smart indent
    set expandtab       " use spaces
    set shiftwidth=4    " use indents of 4 spaces
    set tabstop=4       " tabs are spaces
    set softtabstop=4   " let backspace delete indent

    set nojoinspaces    " prevents inserting two spaces after punctuation on join (J)

    set wrap            " wrap lines

" }}}
" Functions {{{

" toggle background
function! ToggleBg()
    let s:tbg = &background
    if s:tbg == "dark"
        set background=light
    else
        set background=dark
    endif
endfunction
noremap <leader>bg :call ToggleBg()<CR>

"
" }}}
" {{{ Temporary Settings

inoremap jj <Esc>
set number
" }}}
" Local Vimrc After {{{

    if filereadable(expand("~/.local.vimrc.after"))
        source ~/.local.vimrc.after
    endif

" }}}


