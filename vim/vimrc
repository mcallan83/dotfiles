" --------------
" Vundle Manager
" --------------
set nocompatible
filetype off
let vundleFlag=1
let vundle_readme=expand('~/.vim/bundle/vundle/README.md')
if !filereadable(vundle_readme)
	echo "Installing Vundle"
	echo ""
	silent !mkdir -p ~/.vim/bundle
	silent !git clone https://github.com/gmarik/vundle ~/.vim/bundle/vundle
	let vundleFlag=0
endif
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()
Bundle 'gmarik/vundle'

" --------------
" Define Bundles
" --------------

Bundle 'altercation/vim-colors-solarized' 
Bundle 'Raimondi/delimitMate' 
Bundle 'bling/vim-airline' 
	let g:airline#extensions#tabline#enabled = 1
	let g:airline#extensions#whitespace#enabled = 0
	let g:airline_detect_paste=1
	let g:airline_theme="solarized"
	let g:airline_left_sep = ''
	let g:airline_left_alt_sep = ''
	let g:airline_right_sep = ''
	let g:airline_right_alt_sep = ''
	set noshowmode
Bundle 'kien/ctrlp.vim' 
	let g:ctrlp_working_path_mode = 0
Bundle 'mattn/emmet-vim' 
Bundle 'scrooloose/syntastic' 
Bundle 'Lokaltog/vim-easymotion' 
Bundle 'goldfeld/vim-seek' 
Bundle 'nathanaelkane/vim-indent-guides' 
Bundle 'tpope/vim-commentary' 
	"autocmd FileType php set commentstring=#\ %s
Bundle 'tpope/vim-surround' 
Bundle 'godlygeek/tabular' 


" ---------------
" Install Bundles
" ---------------

if vundleFlag == 0
    echo "Installing Bundles, please ignore key map errors"
    echo ""
    :BundleInstall
endif

filetype plugin indent on "detect filetype
set encoding=utf-8 "duh!
syntax enable
set laststatus=2
set number

" --------------------
" Color
" --------------------
let g:solarized_visibility="high" 
let g:solarized_diffmode="high"
let g:solarized_menu=0
set t_Co=256
set background=light
colorscheme solarized

" --------------------
" Text Formatting
" --------------------
set wrap "wrap lines
set tabstop=4 "tab is 4 spaces
set softtabstop=4 "tab is 4 spaces
set shiftwidth=4 "tab is 4 spaces
set autoindent "auto-indent
set smartindent "make it smart
set shiftround "always indent/outdent to the nearest tabstop
set smarttab "tabs at start of line, spaces elsewhere
set backspace=2



" Indent Guides
let g:indent_guides_guide_size = 1

" --------------------
" Custom Commands
" --------------------

"remap jj to <Esc> in insert mode
inoremap kj <Esc>

"remap <leader> to ;
let mapleader=";"
let g:mapleader=";"

" buffers
map <leader>n :bn<cr>
map <leader>p :bp<cr>
map <leader>d :bd<cr>

" toggle line numbers with <C-n>
function! NumberToggle()
  if(&relativenumber == 1)
    set number
  else
    set relativenumber
  endif
endfunc
nnoremap <C-n> :call NumberToggle()<cr>

" wrap word with "", '', (), [], or {} 
map <leader>" ysiw"
vmap <leader>" c"<C-R>""<ESC>
map <leader>' ysiw'
vmap <leader>' c'<C-R>"'<ESC>
map <leader>) ysiw)
map <leader>( ysiw)
vmap <leader>) c(<C-R>")<ESC>
vmap <leader>( c(<C-R>")<ESC>
map <leader>] ysiw]
map <leader>[ ysiw]
vmap <leader>[ c[<C-R>"]<ESC>
vmap <leader>] c[<C-R>"]<ESC>
map <leader>} ysiw}
map <leader>{ ysiw}
vmap <leader>} c{<C-R>"}<ESC>
vmap <leader>{ c{<C-R>"}<ESC>

" hashrocket in insert mode
imap <c-h> <space>=><space>

" easy insert _, -, and = in insert mode
imap <c-k> _
imap <c-j> -
imap <c-u> =
"
" bypass autoclosed quote or bracket in insert mode
imap <C-l> <esc>wa
