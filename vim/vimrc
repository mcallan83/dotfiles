" vim:fdm=marker

" NeoBundle {{{

if has('vim_starting')
    if &compatible
      set nocompatible
    endif
    set runtimepath+=~/.vim/bundle/neobundle.vim/
endif
let vundle_readme=expand('~/.vim/bundle/neobundle.vim/README.md')
if !filereadable(vundle_readme)
    echo "Installing NeoBundle..."
    echo ""
    silent !mkdir -p ~/.vim/bundle
    silent !git clone https://github.com/Shougo/neobundle.vim ~/.vim/bundle/neobundle.vim/
endif
call neobundle#begin(expand('~/.vim/bundle/'))
NeoBundleFetch 'Shougo/neobundle.vim'

" packages
" ========
NeoBundle 'chriskempson/base16-vim'
NeoBundle 'gosukiwi/vim-atom-dark'
NeoBundle 'tpope/vim-vinegar'
NeoBundle 'scrooloose/nerdtree'
NeoBundle 'majutsushi/tagbar'
NeoBundle 'tpope/vim-surround'
NeoBundle 'tpope/vim-repeat'
NeoBundle 'airblade/vim-gitgutter'
NeoBundle 'Lokaltog/vim-easymotion'
NeoBundle 'kien/ctrlp.vim'
NeoBundle 'sheerun/vim-polyglot'
NeoBundle 'vim-airline/vim-airline'
NeoBundle 'vim-airline/vim-airline-themes'
NeoBundle 'tobyS/vmustache'
NeoBundle 'tobyS/pdv'
NeoBundle 'chriskempson/vim-tomorrow-theme'
NeoBundle 'editorconfig/editorconfig-vim'

call neobundle#end()
filetype plugin indent on
NeoBundleCheck

" }}}
" General {{{

    set number                          " enable line numbers
    set noerrorbells visualbell t_vb=   " disable bells
    set backspace=indent,eol,start      " make backspace behave like backspace
    set laststatus=2                    " always show status bar
    set noshowmode                      " hide current mode
    set updatetime=750                  " 750 millisecond update time

    " --- encoding ---
    set encoding=utf-8
    scriptencoding utf-8

" }}}
" GUI {{{

    syntax on
    set background=dark

    if has("gui_running")

        colorscheme atom-dark
        set cursorline          " highlight current line
        set linespace=10        " line spacing

        " --- disable scroll bars and tabs ---
        set guioptions-=l
        set guioptions-=L
        set guioptions-=r
        set guioptions-=R
        set guioptions-=e

        if has("gui_macvim")

            set guifont=Menlo:h17

        endif

    else

        set t_CO=256                    " use 256 colors
        colorscheme Tomorrow-Night-Eighties

    endif

" }}}
" Formatting {{{

    set autoindent      " indent to same level as previous line
    set smartindent     " smart indent
    set expandtab       " use spaces
    set shiftwidth=4    " use indents of 4 spaces
    set tabstop=4       " tabs are spaces
    set softtabstop=4   " let backspace delete indent

    set nojoinspaces    " prevents inserting two spaces after punctuation on line join

    set wrap            " wrap lines
    set showbreak=â‡‡     " fancy character for line wraps

" }}}
" Search {{{

set incsearch
set hlsearch
set ignorecase
set smartcase

" }}}
" Splits {{{

    " -- open splits below and to the right ---
    set splitbelow
    set splitright

    " --- navigate splits easily ---
    nmap <C-J> <C-W><C-J>
    nmap <C-K> <C-W><C-K>
    nmap <C-H> <C-W><C-H>
    nmap <C-L> <C-W><C-L>

" }}}
" Mappings {{{

    " exit insert mode with JJ
    inoremap jj <Esc>

    " set leader to ,
    let mapleader = ','
    let g:mapleader = ","

    " edit vimrc in new tab
    nmap <Leader>ev :tabedit $MYVIMRC<cr>

    " clear search highlight
    nmap <Leader><space> :nohlsearch<cr>

    " Quickly browse to any tag/symbol in the project.
    " tip: run ctags -R to regenerated index.
    nmap <Leader>f :tag<space>

" }}}
" Plugins {{{
    " NerdTree {{{

            let NERDTreeHijackNetrw=0       " don't hijack netrw
            let NERDTreeMinimalUI=1         " minimal ui
            let g:NERDTreeShowHidden=1      " show hidden files

            " --- ignore files ---
            let NERDTreeIgnore=['.git', '.DS_Store', '\.swp$', '\.swo$']

            " --- toggle NerdTree ---
            nmap <D-1> :NERDTreeToggle<cr>
            nmap <Leader>1 :NERDTreeToggle<cr>

    " }}}
    " Tagbar {{{

        let g:tagbar_autofocus = 1          " auto focus on Tagbar on open

        " --- toggle Tagbar ---
        nmap <leader>2 :TagbarToggle<cr>                " toggle Tagbar
        nmap <D-2> :TagbarToggle<cr>                    " toggle Tagbar
        nmap <leader>3 :TagbarOpenAutoClose<cr>         " toggle Tagbar with auto close
        nmap <D-3> :TagbarOpenAutoClose<cr>             " toggle Tagbar with auto close

    " }}}
    " Git Gutter {{{

        let g:gitgutter_sign_column_always = 1      " always show sign column

    " }}}
    " easymotion/vim-easymotion {{{

        let g:EasyMotion_smartcase = 1                  " map keys by smartcase
        nmap <leader><leader> <Plug>(easymotion-s2)

    " }}}
    " ctrlpvim/ctrlp.vim {{{

        let g:ctrlp_custom_ignore = 'node_modules\|DS_Store\|git\|vendor'
        let g:ctrlp_match_window = 'top,order:ttb,min:1,max:30,results:30'

        nmap <D-p> :CtrlP<cr>
        nmap <D-r> :CtrlPBufTag<cr>
        nmap <D-e> :CtrlPMRUFiles<cr>

    " }}}
    " vim-airline/vim-airline {{{

        let g:airline_theme="powerlineish"
        let g:airline#extensions#whitespace#enabled = 0
        let g:airline#extensions#hunks#enabled = 0
        let g:airline_detect_paste=1
        let g:airline_left_sep = ''
        let g:airline_left_alt_sep = ''
        let g:airline_right_sep = ''
        let g:airline_right_alt_sep = ''

    "}}}
    " tobyS/pdv {{{

        let g:pdv_template_dir = $HOME ."/.vim/bundle/pdv/templates"
        nnoremap <Leader>pd :call pdv#DocumentCurrentLine()<CR>

    " }}}
    " editorconfig/editorconfig-vim {{{

        let g:EditorConfig_exclude_patterns = ['fugitive://.*', 'scp://.*']

    " }}}
" }}}
" Auto-Commands {{{

    " automatically source .vimrc on save
    augroup autosourcing
        au!
        autocmd BufWritePost .vimrc source %
    augroup END

    " disable automatic comment insertion
    augroup comments
        au!
        autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o
    augroup END

" }}}
