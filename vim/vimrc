" vim:fdm=marker

" NeoBundle {{{

if has('vim_starting')
    set nocompatible
    set runtimepath+=~/.vim/bundle/neobundle.vim/
endif
let vundle_readme=expand('~/.vim/bundle/neobundle.vim/README.md')
if !filereadable(vundle_readme)
    echo "Installing NeoBundle..."
    echo ""
    silent !mkdir -p ~/.vim/bundle
    silent !git clone https://github.com/Shougo/neobundle.vim ~/.vim/bundle/neobundle.vim/
endif
call neobundle#begin(expand('~/.vim/bundle/'))
NeoBundleFetch 'Shougo/neobundle.vim'

" packages
" ========
NeoBundle 'altercation/vim-colors-solarized'
NeoBundle 'airblade/vim-gitgutter'
NeoBundle 'bling/vim-airline'
NeoBundle 'sheerun/vim-polyglot'
NeoBundle 'terryma/vim-expand-region'
NeoBundle 'nathanaelkane/vim-indent-guides'

call neobundle#end()
filetype plugin indent on
NeoBundleCheck

" }}}
" General {{{

    set nocompatible        " who needs vi?
    syntax on               " syntax highligting
    set mouse=a             " enable mouse
    set mousehide           " hide mouse cursor while typing
    set encoding=utf-8
    scriptencoding utf-8

    " clipboard
    if has('clipboard')
        " use + register for copy-paste
        if has('unnamedplus')
            set clipboard=unnamed,unnamedplus
        " use * register for copy-paste
        else
            set clipboard=unnamed
        endif
    endif

    " disable backups
    set nobackup
    set nowb
    set noswapfile

    " disable bells
    set vb t_vb=

" }}}
" UI {{{

    set background=dark " assume a dark background

    " solarized
    let g:solarized_visibility="high"
    let g:solarized_diffmode="high"
    let g:solarized_menu=0
    " let g:solarized_termcolors=256 " use downgraded color scheme
    colorscheme solarized

    " highlight cursorline
    set cursorline              " highlight cursor line
    highlight clear SignColumn  " make signcolumn match background
    highlight clear LineNr      " make current line number have same BG color

    set backspace=indent,eol,start      " enable a true backspace
    set number                          " line numbers
    set laststatus=2                    " show status bar
    set noshowmode                      " hide current mode


    " trailing whitespace
    " set list
    " set listchars=tab:›\ ,trail:•,extends:#,nbsp:.

" }}}
" Formatting {{{

    set autoindent      " indent to same level as previous line
    set smartindent     " smart indent
    set expandtab       " use spaces
    set shiftwidth=4    " use indents of 4 spaces
    set tabstop=4       " tabs are spaces
    set softtabstop=4   " let backspace delete indent

    set nojoinspaces    " prevents inserting two spaces after punctuation on join (J)

    set wrap            " wrap lines
    set showbreak=⇇     " fancy character for line wraps

" }}}
" Filetype Specific {{{

augroup filetypes 
    au!

    " disable automatic comment insertion for all files
    au FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o

    " enable spellcheck in gitcommit
    au BufNewFile,BufRead COMMIT_EDITMSG setlocal spell

augroup END

" }}}
" Key Maps {{{

    " leader
    let mapleader = "\,"
    let g:mapleader = "\,"

    " exit insert mode with JJ
    inoremap jj <Esc>

    " toggle background
    noremap <leader>bg :call ToggleBg()<CR>
    
    " toggle paste mode
    nmap <leader>p :setlocal paste! paste?<cr>

    " indent code in visual mode without exiting visual mode
    vnoremap < <gv
    vnoremap > >gv

    " allow using repeat operator with visual selection
    vnoremap . :normal .<CR>

" }}}
" Functions {{{

    " toggle background
    function! ToggleBg()
        let s:tbg = &background
        if s:tbg == "dark"
            set background=light
            hi IndentGuidesOdd  ctermbg=lightgrey
            hi IndentGuidesEven ctermbg=lightgrey

        else
            set background=dark
            hi IndentGuidesOdd  ctermbg=black
            hi IndentGuidesEven ctermbg=black
        endif
    endfunction

    " autoload vimrc
    augroup reload_vimrc
        au!
        au BufWritePost $MYVIMRC source $MYVIMRC
    augroup END

    " automatically insert paste mode
    function! WrapForTmux(s)
        if !exists('$TMUX')
            return a:s
        endif
        let tmux_start = "\<Esc>Ptmux;"
        let tmux_end = "\<Esc>\\"
        return tmux_start . substitute(a:s, "\<Esc>", "\<Esc>\<Esc>", 'g') . tmux_end
    endfunction
    let &t_SI .= WrapForTmux("\<Esc>[?2004h")
    let &t_EI .= WrapForTmux("\<Esc>[?2004l")
    function! XTermPasteBegin()
        set pastetoggle=<Esc>[201~
        set paste
        return ""
    endfunction
    inoremap <special> <expr> <Esc>[200~ XTermPasteBegin()

"
" }}}
" Plugins {{{
        
    " vim-gitgutter
    let g:gitgutter_sign_column_always = 1

    " vim-airline
    let g:airline_theme="powerlineish"
    let g:airline#extensions#tabline#enabled = 1
    let g:airline#extensions#tabline#fnamemod = ':t'
    let g:airline#extensions#whitespace#enabled = 0
    let g:airline#extensions#hunks#enabled = 0
    let g:airline_detect_paste=1
    let g:airline_left_sep = ''
    let g:airline_left_alt_sep = ''
    let g:airline_right_sep = ''
    let g:airline_right_alt_sep = ''

    " vim-expand-region
    vmap v <Plug>(expand_region_expand)

    " vim-indent-guides
    let g:indent_guides_start_level = 2
    let g:indent_guides_guide_size = 1
    let g:indent_guides_enable_on_vim_startup = 1
    hi IndentGuidesOdd  ctermbg=black
    hi IndentGuidesEven ctermbg=black

" }}}
